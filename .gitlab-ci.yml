image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  TF_IN_AUTOMATION: "true"
  TF_VAR_tfenv: "test"
  TF_VAR_app_name:
  TF_VAR_app_slug:
  


cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .terraform

before_script:
  - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator
  - install aws-iam-authenticator /usr/local/bin/ && rm aws-iam-authenticator
  - terraform --version
  - terraform init -backend-config "region=ap-southeast-1" \
      -backend-config "key=$TF_VAR_app_name/$TF_VAR_tfenv/terraform.tfstate" \
      -backend-config "bucket=ets-terraform-remote-state-storage-s3" \
      -backend-config "encrypt=true"

stages:
  - validate
  - plan
  - apply
  - destroy

## VALIDATE STAGE
validate:
  stage: validate
  script:
    - terraform validate
  only:
    - branches

## PLAN STAGE
tfsec:
  image: 
    name: wesleydeanflexion/tfsec
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/go/bin'
  stage: plan
  before_script:
    - tfsec -v
  script: tfsec . -f json | tee gl-sast-report.json
  artifacts:
    reports:
      sast: gl-sast-report.json

merge review:
  stage: plan
  script:
    - terraform plan -out=$PLAN
    - "terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE"
    - echo \`\`\`diff > plan.txt
    - terraform show -no-color ${PLAN} | tee -a plan.txt
    - echo \`\`\` >> plan.txt
    - sed -i -e 's/  +/+/g' plan.txt
    - sed -i -e 's/  ~/~/g' plan.txt
    - sed -i -e 's/  -/-/g' plan.txt
    - MESSAGE=$(cat plan.txt)
    - >-
      curl -X POST -g -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" 
      --data-urlencode "body=${MESSAGE}" 
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/discussions"
  artifacts:
    name: plan
    paths:
      - $PLAN
    reports:
        terraform: $JSON_PLAN_FILE
  only:
    - merge_requests

plan:
  stage: plan
  script:
    - terraform plan -out=$PLAN
  artifacts:
    name: plan
    paths:
      - $PLAN
  only:
    - branches

## APPLY TEST ENVS
apply:
  stage: apply
  script:
    - terraform apply -input=false $PLAN
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env-dynamic-url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  dependencies:
    - plan
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    untracked: true
    reports:
      dotenv: deploy.env
  except:
    - master
  environment:
    name: test
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: destroy_test

## APPLY STAGING
apply:
  stage: apply
  script:
    - terraform apply -input=false $PLAN
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env-dynamic-url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  dependencies:
    - plan
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    untracked: true
    reports:
      dotenv: deploy.env
  only:
    - master
  environment:
    name: staging
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: destroy_staging

## APPLY PRODUCTION
apply:
  stage: apply
  script:
    - terraform apply -input=false $PLAN
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env-dynamic-url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  dependencies:
    - plan
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    untracked: true
    reports:
      dotenv: deploy.env
  only:
    - master
  when: manual
  environment:
    name: production
    url: $DYNAMIC_ENVIRONMENT_URL

## DESTROY TEST
destroy_test:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  when: manual
  only:
    - branches
  except:
    - master 
  environment:
    name: test
    action: stop

## DESTROY STAGING
destroy_staging:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  when: manual
  only:
    - master
  environment:
    name: staging
    action: stop