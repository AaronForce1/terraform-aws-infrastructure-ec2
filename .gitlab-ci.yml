image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  TF_IN_AUTOMATION: "true"
  
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .terraform

.terraform_init: &terraform_init
  - apk add --update curl jq
  - alias convert_report="jq -r '([.resource_changes[].change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator
  - install aws-iam-authenticator /usr/local/bin/ && rm aws-iam-authenticator
  - terraform --version
  - printenv | grep "TF_VAR"
  - terraform init -backend-config "region=ap-southeast-1" -backend-config "key=$TF_VAR_app_name/$TF_VAR_tfenv/terraform.tfstate" -backend-config "bucket=ets-terraform-remote-state-storage-s3" -backend-config "encrypt=true"

stages:
  - validate
  - plan
  - apply
  - provision
  - destroy

## VALIDATE
validate:
  stage: validate
  before_script:
    - *terraform_init
  script:
    - terraform validate
  only:
    - web
    - merge_requests
    - pipelines
    

## PLAN 
tfsec:
  image: 
    name: wesleydeanflexion/tfsec
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/go/bin'
  stage: plan
  before_script:
    - *terraform_init
    - tfsec -v
  script: tfsec . -f json | tee gl-sast-report.json
  dependencies:
    - validate
  artifacts:
    reports:
      sast: gl-sast-report.json
  only:
    refs:
      - web
      - merge_requests
      - pipelines
    variables:
      - $TF_VAR_tfenv == "stag" || $TF_VAR_tfenv == "prod"

merge review:
  stage: plan
  before_script:
    - *terraform_init
  script:
    - terraform plan -out=$PLAN
    - "terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE"
    - echo \`\`\`diff > plan.txt
    - terraform show -no-color ${PLAN} | tee -a plan.txt
    - echo \`\`\` >> plan.txt
    - sed -i -e 's/  +/+/g' plan.txt
    - sed -i -e 's/  ~/~/g' plan.txt
    - sed -i -e 's/  -/-/g' plan.txt
    - MESSAGE=$(cat plan.txt)
    - >-
      curl -X POST -g -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" 
      --data-urlencode "body=${MESSAGE}" 
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/discussions"
  artifacts:
    name: plan
    paths:
      - $PLAN
    reports:
        terraform: $JSON_PLAN_FILE
  only:
    - merge_requests

plan:
  stage: plan
  script:
    - terraform plan -out=$PLAN
  artifacts:
    name: plan
    paths:
      - $PLAN
  only:
    - web
    - pipelines

## APPLY NON PROD ENVS
apply_nonProd:
  stage: apply
  before_script:
    - *terraform_init
  script:
    - terraform apply -input=false $PLAN
  dependencies:
    - plan
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    untracked: true
    reports:
      dotenv: deploy.env
  only:
    refs:
      - web
      - pipelines
  except:
    variables:
      - $TF_VAR_tfenv == "prod"
  environment:
    name: ${TF_VAR_app_slug}-${TF_VAR_tfenv}
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: destroy

## APPLY PRODUCTION
apply_prod:
  stage: apply
  before_script:
    - *terraform_init
  script:
    - terraform apply -input=false $PLAN
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env-dynamic-url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  dependencies:
    - plan
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    untracked: true
    reports:
      dotenv: deploy.env
  only:
    refs:
      - web
      - pipelines
    variables:
      - $TF_VAR_tfenv == "prod"
  when: manual
  environment:
    name: ${TF_VAR_app_slug}-production
    url: $DYNAMIC_ENVIRONMENT_URL

## PROVISION
provision:
  stage: provision
  image: registry.git.hk.asiaticketing.com/technology/system/deploy/ansible:latest
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - echo "$ANSIBLE_VAULT_PASS" >> /deploy/ansible_repo/environment/.vault_pass2
    - echo "X-ets-$TF_VAR_app_slug-TF_VAR_tfenv ansible_host=shell.$TF_VAR_app_slug.$TF_VAR_tfenv.hk.asiaticketing.com live_hostname=X-ets-$TF_VAR_app_slug-$TF_VAR_tfenv ansible_python_interpreter=/usr/bin/python3 remote_ubuntu_home=/deploy" >> /deploy/ansible_repo/Docker.env
    - echo "$HOME   " && echo "ls -la ~/.ssh/"
    - cd /deploy/ansible_repo && ansible-playbook -i ./Docker.env ./playbooks/tools/SetupInstances.yml --extra-vars "tfenv=$TF_VAR_tfenv instance_set=X region=$TF_VAR_aws_region ansible_ssh_private_key_file=~/.ssh/id_rsa live_hostname=X-ets-$TF_VAR_app_slug-$TF_VAR_tfenv CODEchoice=X"
  only:
    refs:
      - web
      - pipelines
  except:
    variables:
      - $TF_VAR_tfenv == "prod"

## DESTROY TEST
destroy:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  when: manual
  only:
    refs:
      - web
      - pipelines
  except:
    variables:
      - $TF_VAR_tfenv == "prod"
  environment:
    name: ${TF_VAR_app_slug}-${TF_VAR_tfenv}
    action: stop